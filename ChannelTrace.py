# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ChannelTrace(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChannelTrace()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChannelTrace(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ChannelTraceBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x64\x61\x74\x31", size_prefixed=size_prefixed)

    # ChannelTrace
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ChannelTrace
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ChannelTrace
    def Voltage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ChannelTrace
    def VoltageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # ChannelTrace
    def VoltageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ChannelTrace
    def VoltageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ChannelTraceStart(builder): builder.StartObject(2)
def Start(builder):
    return ChannelTraceStart(builder)
def ChannelTraceAddChannel(builder, channel): builder.PrependUint32Slot(0, channel, 0)
def AddChannel(builder, channel):
    return ChannelTraceAddChannel(builder, channel)
def ChannelTraceAddVoltage(builder, voltage): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(voltage), 0)
def AddVoltage(builder, voltage):
    return ChannelTraceAddVoltage(builder, voltage)
def ChannelTraceStartVoltageVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartVoltageVector(builder, numElems):
    return ChannelTraceStartVoltageVector(builder, numElems)
def ChannelTraceEnd(builder): return builder.EndObject()
def End(builder):
    return ChannelTraceEnd(builder)