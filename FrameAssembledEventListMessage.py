# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FrameAssembledEventListMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameAssembledEventListMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrameAssembledEventListMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FrameAssembledEventListMessageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x61\x65\x76\x31", size_prefixed=size_prefixed)

    # FrameAssembledEventListMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameAssembledEventListMessage
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from FrameMetadataV1 import FrameMetadataV1
            obj = FrameMetadataV1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FrameAssembledEventListMessage
    def Time(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FrameAssembledEventListMessage
    def TimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # FrameAssembledEventListMessage
    def TimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FrameAssembledEventListMessage
    def TimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FrameAssembledEventListMessage
    def Voltage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # FrameAssembledEventListMessage
    def VoltageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # FrameAssembledEventListMessage
    def VoltageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FrameAssembledEventListMessage
    def VoltageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FrameAssembledEventListMessage
    def Channel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FrameAssembledEventListMessage
    def ChannelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # FrameAssembledEventListMessage
    def ChannelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FrameAssembledEventListMessage
    def ChannelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def FrameAssembledEventListMessageStart(builder): builder.StartObject(4)
def Start(builder):
    return FrameAssembledEventListMessageStart(builder)
def FrameAssembledEventListMessageAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return FrameAssembledEventListMessageAddMetadata(builder, metadata)
def FrameAssembledEventListMessageAddTime(builder, time): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)
def AddTime(builder, time):
    return FrameAssembledEventListMessageAddTime(builder, time)
def FrameAssembledEventListMessageStartTimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTimeVector(builder, numElems):
    return FrameAssembledEventListMessageStartTimeVector(builder, numElems)
def FrameAssembledEventListMessageAddVoltage(builder, voltage): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(voltage), 0)
def AddVoltage(builder, voltage):
    return FrameAssembledEventListMessageAddVoltage(builder, voltage)
def FrameAssembledEventListMessageStartVoltageVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartVoltageVector(builder, numElems):
    return FrameAssembledEventListMessageStartVoltageVector(builder, numElems)
def FrameAssembledEventListMessageAddChannel(builder, channel): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(channel), 0)
def AddChannel(builder, channel):
    return FrameAssembledEventListMessageAddChannel(builder, channel)
def FrameAssembledEventListMessageStartChannelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChannelVector(builder, numElems):
    return FrameAssembledEventListMessageStartChannelVector(builder, numElems)
def FrameAssembledEventListMessageEnd(builder): return builder.EndObject()
def End(builder):
    return FrameAssembledEventListMessageEnd(builder)