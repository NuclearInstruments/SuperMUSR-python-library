# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Histogram(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Histogram()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHistogram(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def HistogramBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x68\x73\x74\x31", size_prefixed=size_prefixed)

    # Histogram
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Histogram
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Histogram
    def Counts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Histogram
    def CountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Histogram
    def CountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Histogram
    def CountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def HistogramStart(builder): builder.StartObject(2)
def Start(builder):
    return HistogramStart(builder)
def HistogramAddChannel(builder, channel): builder.PrependUint32Slot(0, channel, 0)
def AddChannel(builder, channel):
    return HistogramAddChannel(builder, channel)
def HistogramAddCounts(builder, counts): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(counts), 0)
def AddCounts(builder, counts):
    return HistogramAddCounts(builder, counts)
def HistogramStartCountsVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartCountsVector(builder, numElems):
    return HistogramStartCountsVector(builder, numElems)
def HistogramEnd(builder): return builder.EndObject()
def End(builder):
    return HistogramEnd(builder)