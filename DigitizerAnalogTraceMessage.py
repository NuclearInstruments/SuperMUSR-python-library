# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DigitizerAnalogTraceMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DigitizerAnalogTraceMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDigitizerAnalogTraceMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DigitizerAnalogTraceMessageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x64\x61\x74\x31", size_prefixed=size_prefixed)

    # DigitizerAnalogTraceMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DigitizerAnalogTraceMessage
    def DigitizerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DigitizerAnalogTraceMessage
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from FrameMetadataV1 import FrameMetadataV1
            obj = FrameMetadataV1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DigitizerAnalogTraceMessage
    def SampleRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DigitizerAnalogTraceMessage
    def Channels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ChannelTrace import ChannelTrace
            obj = ChannelTrace()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DigitizerAnalogTraceMessage
    def ChannelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DigitizerAnalogTraceMessage
    def ChannelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def DigitizerAnalogTraceMessageStart(builder): builder.StartObject(4)
def Start(builder):
    return DigitizerAnalogTraceMessageStart(builder)
def DigitizerAnalogTraceMessageAddDigitizerId(builder, digitizerId): builder.PrependUint8Slot(0, digitizerId, 0)
def AddDigitizerId(builder, digitizerId):
    return DigitizerAnalogTraceMessageAddDigitizerId(builder, digitizerId)
def DigitizerAnalogTraceMessageAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return DigitizerAnalogTraceMessageAddMetadata(builder, metadata)
def DigitizerAnalogTraceMessageAddSampleRate(builder, sampleRate): builder.PrependUint64Slot(2, sampleRate, 0)
def AddSampleRate(builder, sampleRate):
    return DigitizerAnalogTraceMessageAddSampleRate(builder, sampleRate)
def DigitizerAnalogTraceMessageAddChannels(builder, channels): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(channels), 0)
def AddChannels(builder, channels):
    return DigitizerAnalogTraceMessageAddChannels(builder, channels)
def DigitizerAnalogTraceMessageStartChannelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChannelsVector(builder, numElems):
    return DigitizerAnalogTraceMessageStartChannelsVector(builder, numElems)
def DigitizerAnalogTraceMessageEnd(builder): return builder.EndObject()
def End(builder):
    return DigitizerAnalogTraceMessageEnd(builder)