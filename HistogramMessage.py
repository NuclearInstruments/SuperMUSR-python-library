# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HistogramMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HistogramMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHistogramMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def HistogramMessageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x68\x73\x74\x31", size_prefixed=size_prefixed)

    # HistogramMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HistogramMessage
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from FrameMetadataV1 import FrameMetadataV1
            obj = FrameMetadataV1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HistogramMessage
    def BinWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HistogramMessage
    def Channels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Histogram import Histogram
            obj = Histogram()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HistogramMessage
    def ChannelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HistogramMessage
    def ChannelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def HistogramMessageStart(builder): builder.StartObject(3)
def Start(builder):
    return HistogramMessageStart(builder)
def HistogramMessageAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return HistogramMessageAddMetadata(builder, metadata)
def HistogramMessageAddBinWidth(builder, binWidth): builder.PrependUint32Slot(1, binWidth, 0)
def AddBinWidth(builder, binWidth):
    return HistogramMessageAddBinWidth(builder, binWidth)
def HistogramMessageAddChannels(builder, channels): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(channels), 0)
def AddChannels(builder, channels):
    return HistogramMessageAddChannels(builder, channels)
def HistogramMessageStartChannelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChannelsVector(builder, numElems):
    return HistogramMessageStartChannelsVector(builder, numElems)
def HistogramMessageEnd(builder): return builder.EndObject()
def End(builder):
    return HistogramMessageEnd(builder)